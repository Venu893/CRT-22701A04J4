
import Java.util.ArayList;
public class Practice {
    public static void main(String[] args) {
        Graph graph = new Graph(4);  
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(0, 3);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);

        printGraph(graph);
    }

    
    static void printGraph(Graph graph) {
        for (int i = 0; i < graph.vertices; i++) {
            System.out.println(i + ": " + graph.neighbors(i));
        }
    }
}
class Graph{
    ArrayList<ArrayList<Integer>>graph;
    int vertices;
    Graph(int vertices){
        this.vertices=vertices;
        this.graph=new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<vertices;i++){
            graph.add(new ArrayList<Integer>());
        }
    }
    void addEdge(int src,int dest){
        if(isvalid(src,dest)){
            graph.get(src).add(dest);
            graph.get(dest).add(src);
        }else{
            System.out.println("Invalid source or destinations");
        }
    }
    void removeEdge(int src,int dest){
        if(isvalid(src,dest)){
            graph.get(src).remove(dest);
            graph.get(dest).remove(src);
        }else{
            System.out.println("Invalid source and Destination");
        }
    }
    public ArrayList<Integer>neibours(int node){
        return graph.get(node);
    }
    boolean isHandlingEdge(int src,int dest){
        if(isvalid(src,dest)){
            var arr=graph.get(src);
            for(int i=0;i<arr.size();i++){
                if(arr.get(i)==dest){
                    return true;
                }
            }
            return false;
        }
    }
}